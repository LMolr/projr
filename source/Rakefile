$:.push(File.join(File.dirname(__FILE__), 'lib'))

require 'fileutils'

require 'highline/import'

require 'projr'


desc 'Preview the website'
task :preview do
  config_ru_pth = $config[:out_pth].join('config.ru')
  Dir.chdir(File.dirname(config_ru_pth)) do
    rerun_pid = Process.spawn("rerun -- rackup --port #{$config[:test_server_port]} config.ru")

    trap('INT') {
      [rerun_pid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
      exit 0
    }
    [rerun_pid].each { |pid| Process.wait(pid) }
  end
end

desc 'Compile the sources'
task :compile => :cleanup do
  status = Compilers::Files.compile
  status &&= Compilers::TestServer.compile
  status &&= Compilers::Rss.compile
  puts "#{status ? 'Successfully compiled' : 'Failed to compile'} the sources"
end

desc 'Cleanup the compiled website'
task :cleanup do
  compiled_files_pths = Dir[$config[:out_pth].join('**')].delete_if do |file_pth|
    file_pth =~ /LICENSE\.md|README\.md|#{$config[:root_pth]}/
  end
  unless compiled_files_pths.empty?
    if agree("Remove these files?\n[ #{compiled_files_pths.join(', ')} ]")
      compiled_files_pths.each { |file_pth| FileUtils.rm_r(file_pth) }
    end
  end
end

