require 'fileutils'
require 'pathname'
require 'ostruct'
require 'securerandom'
require 'uri'

require 'highline/import'
require 'atom'
require 'awesome_print'
require 'rest_client'

require 'erubis'
require 'haml'
require 'liquid'
require 'redcloth'
require 'rdoc'
require 'rdoc/markup'
require 'rdoc/markup/to_html'
require 'rdiscount'
require 'sass'
require 'less'
require 'coffee_script'
require 'tilt'

$:.push(File.join(File.dirname(__FILE__), 'lib'))

require 'projr'


# { Support methods & classes / Helper methods

# }

# { Tasks

desc 'Preview the website'
task :preview do
  config_ru_pth = OUT_PTH.join('config.ru')
  Dir.chdir(File.dirname(config_ru_pth)) do
    rerun_pid = Process.spawn("rerun -- rackup --port #{TEST_SERVER_PORT} config.ru")

    trap('INT') {
      [rerun_pid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
      exit 0
    }
    [rerun_pid].each { |pid| Process.wait(pid) }
  end
end

desc 'Compile the sources'
task :compile => :cleanup do
  status = compile_files
  status &&= compile_test_server
  status &&= generate_rss
  puts "#{status ? 'Successfully compiled' : 'Failed to compile'} the sources"
end

desc 'Cleanup the compiled website'
task :cleanup do
  compiled_files_pths = Dir[OUT_PTH.join('**')].delete_if do |file_pth|
    file_pth =~ /LICENSE\.md|README\.md|#{ROOT_PTH}/
  end
  unless compiled_files_pths.empty?
    if agree("Remove these files?\n[ #{compiled_files_pths.join(', ')} ]")
      compiled_files_pths.each { |file_pth| FileUtils.rm_r(file_pth) }
    end
  end
end

# }

